import tkinter as tk          # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É Tkinter –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è GUI, —Å–∫–æ—Ä–æ—á—É—î–º–æ —ñ–º'—è –¥–æ tk
import threading              # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ—Ç–æ–∫–∞–º–∏ (—â–æ–± GUI –Ω–µ –∑–∞–≤–∏—Å–∞–≤ –ø—ñ–¥ —á–∞—Å –æ–±—á–∏—Å–ª–µ–Ω—å)
import csv                    # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ CSV-—Ñ–∞–π–ª–∞–º–∏ (–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é)
import os                     # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫, —à–ª—è—Ö–∏)
from datasets import load_dataset          # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é load_dataset –∑ —Ç–≤–æ–≥–æ –º–æ–¥—É–ª—è datasets.py
from static.mode_config import MODE_CONFIG # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ MODE_CONFIG –∑ static/mode_config.py (–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤)

# –°–ª–æ–≤–Ω–∏–∫ –∑ "–ª—é–¥—è–Ω–∏–º–∏" –Ω–∞–∑–≤–∞–º–∏ –µ—Ç–∞–ø—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É GUI
MODE_NAMES = {
    "features": "–í—ñ–¥–±—ñ—Ä –æ–∑–Ω–∞–∫",             # –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–ª—é—á "features" ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É "–í—ñ–¥–±—ñ—Ä –æ–∑–Ω–∞–∫"
    "params": "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∏–π —Å–∏–Ω—Ç–µ–∑",       # "params" ‚Üí "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∏–π —Å–∏–Ω—Ç–µ–∑"
    "structure": "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏–π —Å–∏–Ω—Ç–µ–∑",      # "structure" ‚Üí "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏–π —Å–∏–Ω—Ç–µ–∑"
    "opt": "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"          # "opt" ‚Üí "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"
}

def log(root, output, msg, tag=None):
    """
    –î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ GUI –∑ –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º.
    root  ‚Äì –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ Tkinter
    output ‚Äì –≤—ñ–¥–∂–µ—Ç Text, –∫—É–¥–∏ –ø–∏—à–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    msg   ‚Äì —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    tag   ‚Äì —Ç–µ–≥ –¥–ª—è —Å—Ç–∏–ª—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–ª—ñ—Ä)
    """
    # root.after(0, ...) ‚Äì –≤–∏–∫–æ–Ω—É—î –¥—ñ—é —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ GUI (—á–µ—Ä–µ–∑ 0 –º—Å), —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ –ø–æ—Ç–æ–∫–∞–º–∏
    # lambda: (...) ‚Äì –∞–Ω–æ–Ω—ñ–º–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î –æ–¥—Ä–∞–∑—É –∫—ñ–ª—å–∫–∞ –¥—ñ–π
    root.after(0, lambda: (
        output.insert(tk.END, msg + "\n", tag),  # –≤—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫—ñ–Ω–µ—Ü—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        output.see(tk.END)                       # –ø—Ä–æ–∫—Ä—É—á—É—î–º–æ –ª–æ–≥ –¥–æ–Ω–∏–∑—É, —â–æ–± –±—É–ª–æ –≤–∏–¥–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫
    ))

def format_result_compact(mode, result):
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π –≤–∏–≥–ª—è–¥ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ.
    mode   ‚Äì —è–∫–∏–π –µ—Ç–∞–ø (features, params, structure, opt)
    result ‚Äì —Å–ª–æ–≤–Ω–∏–∫ –∞–±–æ —Å–ø–∏—Å–æ–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if isinstance(result, dict):  # –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äì —Å–ª–æ–≤–Ω–∏–∫
        if mode == "features":    # –î–ª—è –≤—ñ–¥–±–æ—Ä—É –æ–∑–Ω–∞–∫
            return f"–û–∑–Ω–∞–∫–∏: {', '.join(result.get('features', []))}"
        elif mode == "params":    # –î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑—É
            return f"h={result.get('hidden')}, lr={result.get('lr')}, Œ±={result.get('alpha')}"
        elif mode == "structure": # –î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑—É
            return f"{result.get('layers')}√ó{result.get('neurons')}"
        else:
            return ""             # –Ø–∫—â–æ —ñ–Ω—à–∏–π —Å–ª–æ–≤–Ω–∏–∫ ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
    elif isinstance(result, list) and mode == "opt":  # –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äì —Å–ø–∏—Å–æ–∫ —ñ —Ä–µ–∂–∏–º "opt"
        return f"–ü–∞—Ä–µ—Ç–æ‚Äë—Ä—ñ—à–µ–Ω—å={len(result)}"         # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ü–∞—Ä–µ—Ç–æ-—Ä—ñ—à–µ–Ω—å
    return ""  # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫

def set_running(root, is_running=True):
    """
    –ë–ª–æ–∫—É—î –∞–±–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—á–∏—Å–ª–µ–Ω—å.
    root ‚Äì –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
    is_running=True ‚Äì —è–∫—â–æ True, –∫–Ω–æ–ø–∫–∏ –±–ª–æ–∫—É—é—Ç—å—Å—è; —è–∫—â–æ False ‚Äì —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—é—Ç—å—Å—è
    """
    def _apply():
        if hasattr(root, "btn_run_one"):   # –Ø–∫—â–æ —É root —î –∫–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –µ—Ç–∞–ø"
            root.btn_run_one.config(state=("disabled" if is_running else "normal"))
        if hasattr(root, "btn_run_all"):   # –Ø–∫—â–æ —î –∫–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –µ—Ç–∞–ø–∏"
            root.btn_run_all.config(state=("disabled" if is_running else "normal"))
        if hasattr(root, "btn_save_csv"):  # –Ø–∫—â–æ —î –∫–Ω–æ–ø–∫–∞ "–ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞–±–ª–∏—Ü—é"
            root.btn_save_csv.config(state=("disabled" if is_running else "normal"))
        if hasattr(root, "btn_clear"):     # –Ø–∫—â–æ —î –∫–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç–∏"
            root.btn_clear.config(state=("disabled" if is_running else "normal"))
        if hasattr(root, "status_var"):    # –Ø–∫—â–æ —î –∑–º—ñ–Ω–Ω–∞ —Å—Ç–∞—Ç—É—Å—É
            root.status_var.set("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è‚Ä¶" if is_running else "–ì–æ—Ç–æ–≤–æ")  # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω
    root.after(0, _apply)  # –í–∏–∫–æ–Ω—É—î–º–æ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ GUI

def insert_table_row(root, dataset, mode_desc, mae, rmse, extra):
    """–î–æ–¥–∞—î —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—é —Ç–∞ –æ–Ω–æ–≤–ª—é—î –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ MAE."""
    def _ins():
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—é (Treeview)
        item_id = root.results_table.insert(
            "", "end",  # "" –æ–∑–Ω–∞—á–∞—î –∫–æ—Ä—ñ–Ω—å, "end" ‚Äî –≤—Å—Ç–∞–≤–∏—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å
            values=(dataset, mode_desc, f"{mae:.3f}", f"{rmse:.3f}", extra)  # –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫
        )
        # –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π MAE (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π)
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
            items = root.results_table.get_children()
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (id —Ä—è–¥–∫–∞, –∑–Ω–∞—á–µ–Ω–Ω—è MAE)
            maes = [(iid, float(root.results_table.set(iid, "mae"))) for iid in items]
            if maes:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—è–¥–æ–∫ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º MAE
                best_id = min(maes, key=lambda x: x[1])[0]
                # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∏–ª—å —É –≤—Å—ñ—Ö —Ä—è–¥–∫—ñ–≤
                for iid in items:
                    root.results_table.item(iid, tags=())
                # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–≥ "best" –Ω–∞–π–∫—Ä–∞—â–æ–º—É —Ä—è–¥–∫—É
                root.results_table.item(best_id, tags=("best",))
                # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å—Ç–∏–ª—å –¥–ª—è —Ç–µ–≥—É "best" (—Å–≤—ñ—Ç–ª–æ-–∑–µ–ª–µ–Ω–∏–π —Ñ–æ–Ω)
                root.results_table.tag_configure("best", background="#e6ffea")
        except Exception:
            pass
    # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—Ç–∞–≤–∫—É —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ Tkinter
    root.after(0, _ins)


def save_table_to_csv(root, path="results/summary.csv"):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—É —Ç–∞–±–ª–∏—Ü—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É CSV."""
    def _save():
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É results, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
        os.makedirs(os.path.dirname(path), exist_ok=True)
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        cols = ("–ï–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∞", "–ï—Ç–∞–ø –∞–Ω–∞–ª—ñ–∑—É", "MAE", "RMSE", "–î–æ–¥–∞—Ç–∫–æ–≤–æ")
        rows = []
        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö —Ä—è–¥–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ñ
        for iid in root.results_table.get_children():
            vals = root.results_table.item(iid, "values")  # –æ—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—è–¥–∫–∞
            rows.append(vals)
        # –ó–∞–ø–∏—Å—É—î–º–æ —É CSV-—Ñ–∞–π–ª
        with open(path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(cols)   # –∑–∞–ø–∏—Å—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerows(rows)  # –∑–∞–ø–∏—Å—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏
        # –õ–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        log(root, root.output, f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {path}", "ok")
    # –í–∏–∫–æ–Ω—É—î–º–æ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ Tkinter
    root.after(0, _save)


def clear_log_and_table(root):
    """–û—á–∏—â–∞—î –ª–æ–≥ —ñ —Ç–∞–±–ª–∏—Ü—é."""
    def _clear():
        # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –ª–æ–≥—ñ–≤
        root.output.delete("1.0", tk.END)
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ
        for iid in root.results_table.get_children():
            root.results_table.delete(iid)
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —É "–ì–æ—Ç–æ–≤–æ"
        if hasattr(root, "status_var"):
            root.status_var.set("–ì–æ—Ç–æ–≤–æ")
        # –õ–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—á–∏—â–µ–Ω–Ω—è
        log(root, root.output, "üßπ –û—á–∏—â–µ–Ω–æ –ª–æ–≥ —ñ —Ç–∞–±–ª–∏—Ü—é", "info")
    # –í–∏–∫–æ–Ω—É—î–º–æ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ Tkinter
    root.after(0, _clear)

def run_algorithm(root, output, dataset_var, mode_var, gen_var, on_finish=None):
    """
    –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –µ—Ç–∞–ø—É –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –µ–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∏.
    –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–∫–ª–∏–∫–∞—î on_finish (–¥–ª—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É).
    """
    dataset = dataset_var.get()   # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "s1", "s2")
    mode = mode_var.get()         # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ä–µ–∂–∏–º (features, params, structure, opt)

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–∫–æ–ª—ñ–Ω—å
    try:
        gens = int(gen_var.get())   # –ü—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —É —Ü—ñ–ª–µ —á–∏—Å–ª–æ
        if gens <= 0:               # –Ø–∫—â–æ —á–∏—Å–ª–æ <= 0
            raise ValueError("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å –º–∞—î –±—É—Ç–∏ > 0")  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    except Exception:
        # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        log(root, output, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å. –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —Ü—ñ–ª–µ —á–∏—Å–ª–æ.", "warn")
        if on_finish:               # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ callback on_finish
            root.after(0, on_finish) # –í–∏–∫–ª–∏–∫–∞—î–º–æ –π–æ–≥–æ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        return                      # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é

    if mode not in MODE_CONFIG:     # –Ø–∫—â–æ —Ä–µ–∂–∏–º—É –Ω–µ–º–∞—î —É —Å–ª–æ–≤–Ω–∏–∫—É MODE_CONFIG
        log(root, output, f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ç–∞–ø '{mode}'", "warn")
        if on_finish:
            root.after(0, on_finish)
        return

    desc = MODE_NAMES.get(mode, mode)   # –õ—é–¥—è–Ω–∞ –Ω–∞–∑–≤–∞ –µ—Ç–∞–ø—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–í—ñ–¥–±—ñ—Ä –æ–∑–Ω–∞–∫")
    func = MODE_CONFIG[mode]["func"]    # –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ü—å–æ–º—É –µ—Ç–∞–ø—É

    set_running(root, True)             # –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    log(root, output, f"‚ö° –ó–∞–ø—É—Å–∫ –µ—Ç–∞–ø—É ¬´{desc}¬ª –¥–ª—è –µ–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∏ {dataset}‚Ä¶", "info")

    def task():
        try:
            X, y, cols = load_dataset(dataset)  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ (X ‚Äì –æ–∑–Ω–∞–∫–∏, y ‚Äì —Ü—ñ–ª—å, cols ‚Äì –Ω–∞–∑–≤–∏ –æ–∑–Ω–∞–∫)
        except Exception as e:
            log(root, output, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}", "error")
            set_running(root, False)
            if on_finish:
                root.after(0, on_finish)
            return

        # –ü—Ä–æ–≥—Ä–µ—Å —É –ª—é–¥—è–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        make_progress = lambda g, mae, rmse, extra: log(
            root, output,
            f"–ü–æ–∫–æ–ª—ñ–Ω–Ω—è {g+1} –∑ {gens}: —Å–µ—Ä–µ–¥–Ω—è –ø–æ—Ö–∏–±–∫–∞ = {mae:.3f}, –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ = {rmse:.3f}. {extra}",
            "info"
        )

        # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó GA –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –µ—Ç–∞–ø—É
        try:
            if mode == "features":   # –Ø–∫—â–æ —Ä–µ–∂–∏–º "–í—ñ–¥–±—ñ—Ä –æ–∑–Ω–∞–∫"
                result = func(
                    X, y, cols,      # –ü–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ —Å–ø–∏—Å–æ–∫ –æ–∑–Ω–∞–∫
                    pop_size=8,      # –†–æ–∑–º—ñ—Ä –ø–æ–ø—É–ª—è—Ü—ñ—ó
                    n_gen=gens,      # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å
                    mutation_rate=0.2, # –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –º—É—Ç–∞—Ü—ñ—ó
                    max_iter=100,    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π
                    cv_splits=3,     # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ–ª–¥—ñ–≤ –¥–ª—è –∫—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
                    progress_cb=make_progress # Callback –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                )
            else:                    # –î–ª—è —ñ–Ω—à–∏—Ö —Ä–µ–∂–∏–º—ñ–≤ (params, structure, opt)
                result = func(
                    X, y,            # –ü–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ
                    pop_size=8 if mode != "opt" else 10, # –î–ª—è opt —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–∞ –ø–æ–ø—É–ª—è—Ü—ñ—è
                    n_gen=gens,
                    mutation_rate=0.2,
                    max_iter=100,
                    cv_splits=3,
                    progress_cb=make_progress
                )
        except Exception as e:
            log(root, output, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –µ—Ç–∞–ø—É ¬´{desc}¬ª: {e}", "error")
            set_running(root, False)
            if on_finish:
                root.after(0, on_finish)
            return

        # –ü—ñ–¥—Å—É–º–æ–∫ + –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—é
        if isinstance(result, dict):   # –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äì —Å–ª–æ–≤–Ω–∏–∫ (–æ–¥–Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è)
            mae = float(result.get("mae", 0.0))   # –î—ñ—Å—Ç–∞—î–º–æ MAE
            rmse = float(result.get("rmse", 0.0)) # –î—ñ—Å—Ç–∞—î–º–æ RMSE
            extra = format_result_compact(mode, result) # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            log(root, output, f"‚úÖ –ï—Ç–∞–ø ¬´{desc}¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å: MAE={mae:.3f}, RMSE={rmse:.3f}", "ok")
            insert_table_row(root, dataset, desc, mae, rmse, extra) # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—é

        elif isinstance(result, list) and mode == "opt": # –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äì —Å–ø–∏—Å–æ–∫ (–ü–∞—Ä–µ—Ç–æ-—Ä—ñ—à–µ–Ω–Ω—è)
            log(root, output, f"‚úÖ –ï—Ç–∞–ø ¬´{desc}¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω–æ –ü–∞—Ä–µ—Ç–æ‚Äë—Ä—ñ—à–µ–Ω—å: {len(result)}", "ok")
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ü–∞—Ä–µ—Ç–æ‚Äë—Ä—ñ—à–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏–º–∏ —Ä—è–¥–∫–∞–º–∏
            for p in result:
                mae = float(p.get("mae", 0.0))
                rmse = float(p.get("rmse", 0.0))
                extra = f"{p.get('layers')}√ó{p.get('neurons')}"
                insert_table_row(root, dataset, desc, mae, rmse, extra)
        else:
            log(root, output, f"‚ÑπÔ∏è –ï—Ç–∞–ø ¬´{desc}¬ª –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Ç–∏–ø–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "warn")

        set_running(root, False)       # –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
        if on_finish:                  # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ callback
            root.after(0, on_finish)   # –í–∏–∫–ª–∏–∫–∞—î–º–æ –π–æ–≥–æ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ

    threading.Thread(target=task, daemon=True).start() # –ó–∞–ø—É—Å–∫–∞—î–º–æ task —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ


def run_all_modes(root, output, dataset_var, gen_var):
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ –µ—Ç–∞–ø–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ: –í—ñ–¥–±—ñ—Ä –æ–∑–Ω–∞–∫ ‚Üí –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Üí –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è."""
    modes = list(MODE_CONFIG.keys())   # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ä–µ–∂–∏–º—ñ–≤

    def run_next(i=0):
        if i >= len(modes):            # –Ø–∫—â–æ –≤—Å—ñ –µ—Ç–∞–ø–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ
            log(root, output, "‚úÖ –£—Å—ñ –µ—Ç–∞–ø–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω—ñ", "ok")
            return

        mode = modes[i]                # –ë–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º
        desc = MODE_NAMES.get(mode, mode) # –õ—é–¥—è–Ω–∞ –Ω–∞–∑–≤–∞
        log(root, output, f"‚ñ∂ –ì–æ—Ç—É—î–º–æ –∑–∞–ø—É—Å–∫ –µ—Ç–∞–ø—É ¬´{desc}¬ª‚Ä¶", "info")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø, –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π
        run_algorithm(
            root, output, dataset_var,
            tk.StringVar(value=mode), gen_var,
            on_finish=lambda: run_next(i+1)
        )

    run_next()  # –°—Ç–∞—Ä—Ç—É—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ –µ—Ç–∞–ø—É

