import tkinter as tk
import threading
import csv
import os
from datasets import load_dataset
from static.mode_config import MODE_CONFIG

# –õ—é–¥—è–Ω—ñ –Ω–∞–∑–≤–∏ –µ—Ç–∞–ø—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
MODE_NAMES = {
    "features": "–í—ñ–¥–±—ñ—Ä –æ–∑–Ω–∞–∫",
    "params": "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∏–π —Å–∏–Ω—Ç–µ–∑",
    "structure": "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏–π —Å–∏–Ω—Ç–µ–∑",
    "opt": "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"
}

def log(root, output, msg, tag=None):
    """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ GUI –∑ –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º."""
    root.after(0, lambda: (output.insert(tk.END, msg + "\n", tag), output.see(tk.END)))

def format_result_compact(mode, result):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –æ–ø–∏—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ: –±–µ–∑ –∑–∞–π–≤–æ—ó —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó."""
    if isinstance(result, dict):
        if mode == "features":
            return f"–û–∑–Ω–∞–∫–∏: {', '.join(result.get('features', []))}"
        elif mode == "params":
            return f"h={result.get('hidden')}, lr={result.get('lr')}, Œ±={result.get('alpha')}"
        elif mode == "structure":
            return f"{result.get('layers')}√ó{result.get('neurons')}"
        else:
            return ""
    elif isinstance(result, list) and mode == "opt":
        return f"–ü–∞—Ä–µ—Ç–æ‚Äë—Ä—ñ—à–µ–Ω—å={len(result)}"
    return ""

def set_running(root, is_running=True):
    """–ë–ª–æ–∫—É—î/—Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."""
    def _apply():
        if hasattr(root, "btn_run_one"):
            root.btn_run_one.config(state=("disabled" if is_running else "normal"))
        if hasattr(root, "btn_run_all"):
            root.btn_run_all.config(state=("disabled" if is_running else "normal"))
        if hasattr(root, "btn_save_csv"):
            root.btn_save_csv.config(state=("disabled" if is_running else "normal"))
        if hasattr(root, "btn_clear"):
            root.btn_clear.config(state=("disabled" if is_running else "normal"))
        if hasattr(root, "status_var"):
            root.status_var.set("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è‚Ä¶" if is_running else "–ì–æ—Ç–æ–≤–æ")
    root.after(0, _apply)

def insert_table_row(root, dataset, mode_desc, mae, rmse, extra):
    """–î–æ–¥–∞—î —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—é —Ç–∞ –æ–Ω–æ–≤–ª—é—î –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ MAE."""
    def _ins():
        item_id = root.results_table.insert(
            "", "end",
            values=(dataset, mode_desc, f"{mae:.3f}", f"{rmse:.3f}", extra)
        )
        # –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π MAE (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π)
        try:
            items = root.results_table.get_children()
            maes = [(iid, float(root.results_table.set(iid, "mae"))) for iid in items]
            if maes:
                best_id = min(maes, key=lambda x: x[1])[0]
                # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∏–ª—å —É—Å—ñ–º
                for iid in items:
                    root.results_table.item(iid, tags=())
                # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–≥ "best" –Ω–∞–π–∫—Ä–∞—â–æ–º—É
                root.results_table.item(best_id, tags=("best",))
                # –°—Ç–∏–ª—å —Ç–µ–≥—É
                root.results_table.tag_configure("best", background="#e6ffea")  # –ª–µ–≥–∫–∏–π –∑–µ–ª–µ–Ω–∏–π
        except Exception:
            pass
    root.after(0, _ins)

def save_table_to_csv(root, path="results/summary.csv"):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—É —Ç–∞–±–ª–∏—Ü—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É CSV."""
    def _save():
        os.makedirs(os.path.dirname(path), exist_ok=True)
        cols = ("–ï–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∞", "–ï—Ç–∞–ø –∞–Ω–∞–ª—ñ–∑—É", "MAE", "RMSE", "–î–æ–¥–∞—Ç–∫–æ–≤–æ")
        rows = []
        for iid in root.results_table.get_children():
            vals = root.results_table.item(iid, "values")
            rows.append(vals)
        with open(path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(cols)
            writer.writerows(rows)
        log(root, root.output, f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {path}", "ok")
    root.after(0, _save)

def clear_log_and_table(root):
    """–û—á–∏—â–∞—î –ª–æ–≥ —ñ —Ç–∞–±–ª–∏—Ü—é."""
    def _clear():
        root.output.delete("1.0", tk.END)
        for iid in root.results_table.get_children():
            root.results_table.delete(iid)
        if hasattr(root, "status_var"):
            root.status_var.set("–ì–æ—Ç–æ–≤–æ")
        log(root, root.output, "üßπ –û—á–∏—â–µ–Ω–æ –ª–æ–≥ —ñ —Ç–∞–±–ª–∏—Ü—é", "info")
    root.after(0, _clear)

def run_algorithm(root, output, dataset_var, mode_var, gen_var, on_finish=None):
    """
    –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –µ—Ç–∞–ø—É –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –µ–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∏.
    –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–∫–ª–∏–∫–∞—î on_finish (–¥–ª—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É).
    """
    dataset = dataset_var.get()
    mode = mode_var.get()

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–∫–æ–ª—ñ–Ω—å
    try:
        gens = int(gen_var.get())
        if gens <= 0:
            raise ValueError("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å –º–∞—î –±—É—Ç–∏ > 0")
    except Exception:
        log(root, output, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å. –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —Ü—ñ–ª–µ —á–∏—Å–ª–æ.", "warn")
        if on_finish:
            root.after(0, on_finish)
        return

    if mode not in MODE_CONFIG:
        log(root, output, f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ç–∞–ø '{mode}'", "warn")
        if on_finish:
            root.after(0, on_finish)
        return

    desc = MODE_NAMES.get(mode, mode)
    func = MODE_CONFIG[mode]["func"]

    set_running(root, True)
    log(root, output, f"‚ö° –ó–∞–ø—É—Å–∫ –µ—Ç–∞–ø—É ¬´{desc}¬ª –¥–ª—è –µ–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∏ {dataset}‚Ä¶", "info")

    def task():
        try:
            X, y, cols = load_dataset(dataset)
        except Exception as e:
            log(root, output, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}", "error")
            set_running(root, False)
            if on_finish:
                root.after(0, on_finish)
            return

        # –ü—Ä–æ–≥—Ä–µ—Å —É –ª—é–¥—è–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        make_progress = lambda g, mae, rmse, extra: log(
            root, output,
            f"–ü–æ–∫–æ–ª—ñ–Ω–Ω—è {g+1} –∑ {gens}: —Å–µ—Ä–µ–¥–Ω—è –ø–æ—Ö–∏–±–∫–∞ = {mae:.3f}, –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ = {rmse:.3f}. {extra}",
            "info"
        )

        # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó GA –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –µ—Ç–∞–ø—É
        try:
            if mode == "features":
                result = func(
                    X, y, cols,
                    pop_size=8,
                    n_gen=gens,
                    mutation_rate=0.2,
                    max_iter=100,
                    cv_splits=3,
                    progress_cb=make_progress
                )
            else:
                result = func(
                    X, y,
                    pop_size=8 if mode != "opt" else 10,
                    n_gen=gens,
                    mutation_rate=0.2,
                    max_iter=100,
                    cv_splits=3,
                    progress_cb=make_progress
                )
        except Exception as e:
            log(root, output, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –µ—Ç–∞–ø—É ¬´{desc}¬ª: {e}", "error")
            set_running(root, False)
            if on_finish:
                root.after(0, on_finish)
            return

        # –ü—ñ–¥—Å—É–º–æ–∫ + –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—é
        if isinstance(result, dict):
            mae = float(result.get("mae", 0.0))
            rmse = float(result.get("rmse", 0.0))
            extra = format_result_compact(mode, result)
            log(root, output, f"‚úÖ –ï—Ç–∞–ø ¬´{desc}¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å: MAE={mae:.3f}, RMSE={rmse:.3f}", "ok")
            insert_table_row(root, dataset, desc, mae, rmse, extra)

        elif isinstance(result, list) and mode == "opt":
            log(root, output, f"‚úÖ –ï—Ç–∞–ø ¬´{desc}¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω–æ –ü–∞—Ä–µ—Ç–æ‚Äë—Ä—ñ—à–µ–Ω—å: {len(result)}", "ok")
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ü–∞—Ä–µ—Ç–æ‚Äë—Ä—ñ—à–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏–º–∏ —Ä—è–¥–∫–∞–º–∏
            for p in result:
                mae = float(p.get("mae", 0.0))
                rmse = float(p.get("rmse", 0.0))
                extra = f"{p.get('layers')}√ó{p.get('neurons')}"
                insert_table_row(root, dataset, desc, mae, rmse, extra)
        else:
            log(root, output, f"‚ÑπÔ∏è –ï—Ç–∞–ø ¬´{desc}¬ª –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Ç–∏–ø–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "warn")

        set_running(root, False)
        if on_finish:
            root.after(0, on_finish)

    threading.Thread(target=task, daemon=True).start()

def run_all_modes(root, output, dataset_var, gen_var):
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ –µ—Ç–∞–ø–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ: –í—ñ–¥–±—ñ—Ä –æ–∑–Ω–∞–∫ ‚Üí –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Üí –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è."""
    modes = list(MODE_CONFIG.keys())

    def run_next(i=0):
        if i >= len(modes):
            log(root, output, "‚úÖ –£—Å—ñ –µ—Ç–∞–ø–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω—ñ", "ok")
            return

        mode = modes[i]
        desc = MODE_NAMES.get(mode, mode)
        log(root, output, f"‚ñ∂ –ì–æ—Ç—É—î–º–æ –∑–∞–ø—É—Å–∫ –µ—Ç–∞–ø—É ¬´{desc}¬ª‚Ä¶", "info")

        run_algorithm(
            root, output, dataset_var,
            tk.StringVar(value=mode), gen_var,
            on_finish=lambda: run_next(i+1)
        )

    run_next()
